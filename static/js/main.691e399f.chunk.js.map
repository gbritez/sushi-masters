{"version":3,"sources":["Components/AddNew.jsx","Components/RestaurantGrid.jsx","Components/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["AddNew","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClickOpen","setState","open","handleClose","state","react_default","a","createElement","style","margin","Button_default","variant","color","onClick","Dialog_default","onClose","aria-labelledby","DialogTitle_default","id","DialogContent_default","DialogContentText_default","TextField_default","autoFocus","label","type","fullWidth","InputLabelProps","shrink","DialogActions_default","Component","RestaurantGrid","Fragment","Table_default","TableHead_default","TableRow_default","TableCell_default","TableBody_default","dataGrid","map","row","key","name","score","address","lastTimeVisited","index_es","AddNew_AddNew","Search","core_index_es","placeholder","list","App","textAlign","Search_Search","RestaurantGrid_RestaurantGrid","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.691e399f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nexport default class AddNew extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        }\r\n    }\r\n    handleClickOpen = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={{margin: \"10px\"}}>\r\n                <Button variant=\"outlined\" color=\"primary\" onClick={this.handleClickOpen}>\r\n                    Nueva Reseña\r\n            </Button>\r\n                <Dialog\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                >\r\n                    <DialogTitle id=\"form-dialog-title\">Nueva reseña</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            En esta sección podrá agregar un nuevo restaurant y hacer una pequeña reseña.\r\n                </DialogContentText>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"name\"\r\n                            label=\"Nombre del Restaurante:\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"score\"\r\n                            label=\"Calificación:\"\r\n                            type=\"number\"\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"address\"\r\n                            label=\"Ubicación:\"\r\n                            type=\"text\"\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            margin=\"dense\"\r\n                            id=\"lastTimeVisited\"\r\n                            label=\"Última vez visitado:\"\r\n                            type=\"date\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            fullWidth\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"primary\">\r\n                            Cancelar\r\n                </Button>\r\n                        <Button onClick={this.handleClose} color=\"primary\">\r\n                            Enviar\r\n                </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport AddNew from \"./AddNew\";\r\nimport { RemoveRedEye } from '@material-ui/icons';\r\n\r\n\r\nexport default class RestaurantGrid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <Table>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Restaurant</TableCell>\r\n                            <TableCell>Calificación</TableCell>\r\n                            <TableCell>Ubicación</TableCell>\r\n                            <TableCell>Última vez Visitado</TableCell>\r\n                            <TableCell></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {this.props.dataGrid.map(row => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell>{row.name}</TableCell>\r\n                                <TableCell>{row.score}</TableCell>\r\n                                <TableCell>{row.address}</TableCell>\r\n                                <TableCell>{row.lastTimeVisited}</TableCell>\r\n                                <TableCell><RemoveRedEye /></TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n                <AddNew />\r\n            </>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nexport default class Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <>\r\n                <TextField\r\n                    placeholder=\"Search...\"\r\n                    fullWidth\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\" />\r\n            </>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\n\nimport './App.css';\nimport RestaurantGrid from './Components/RestaurantGrid';\nimport Search from './Components/Search'\n\nconst list = [\n  { id: 1, name: \"Kanú\", score: 5, lastTimeVisited: \"11/02/2019\", address: \"Martinez\" },\n  { id: 2, name: \"Sushi Club\", score: 5, lastTimeVisited: \"11/02/2019\", address: \"Pilar\" },\n  { id: 3, name: \"Sushi Town\", score: 5, lastTimeVisited: \"11/02/2019\", address: \"Martinez\" },\n  { id: 4, name: \"Parú\", score: 5, lastTimeVisited: \"11/02/2019\", address: \"Pilar\" },\n  { id: 5, name: \"Fabric Sushi\", score: 5, lastTimeVisited: \"11/02/2019\", address: \"San Isidro\" },\n]\nclass App extends Component {\n  render() {\n    return (\n\n      <>\n        <div style={{ textAlign: 'center' }}>\n          <h1>Sushi Masters</h1>\n        </div>\n        <Search />\n        <RestaurantGrid dataGrid={list} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}